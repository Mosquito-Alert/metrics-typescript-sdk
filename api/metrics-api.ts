/* tslint:disable */
/* eslint-disable */
/**
 * Metrics API
 * API for the Metrics of the Mosquito Alert project
 *
 * The version of the OpenAPI document: 1.0.0 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { LastMetricDate } from '../models';
// @ts-ignore
import type { Metric } from '../models';
// @ts-ignore
import type { MetricDetail } from '../models';
// @ts-ignore
import type { MetricFileRequest } from '../models';
// @ts-ignore
import type { MetricSeasonality } from '../models';
// @ts-ignore
import type { MetricTrend } from '../models';
// @ts-ignore
import type { MetricsListOrderingParameter } from '../models';
// @ts-ignore
import type { PaginatedMetricList } from '../models';
/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Action that creates a batch of metrics, and calls a Predictor model to predict values.  The endpoint accepts a **CSV file** with the following filename format: **\"bites_YYYY-MM-DD.csv**\", and with the following columns: **[code, est]**.  The CSV should contain every region for a specific day (specified in the filename), where the \"code\" is the region code and the \"est\" is the value.
         * @param {MetricFileRequest} metricFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreate: async (metricFileRequest: MetricFileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricFileRequest' is not null or undefined
            assertParamExists('batchCreate', 'metricFileRequest', metricFileRequest)
            const localVarPath = `/metrics/batch/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metricFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Action that returns the all the dates in which there are metrics available.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datesList: async (ordering?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics/dates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Action that returns the last date in which there are metrics available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lastDateRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics/dates/last/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for Metric model.
         * @param {string} [dateFrom] Starting date from which the results will return.
         * @param {string} [dateTo] Ending date which to the results will return.
         * @param {MetricsListOrderingParameter} [ordering] Order by &#x60;date&#x60; (asc) or &#x60;-date&#x60; (desc)
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [regionCode] Determines the region of the results (history).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (dateFrom?: string, dateTo?: string, ordering?: MetricsListOrderingParameter, page?: number, pageSize?: number, regionCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString().substring(0,10) :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString().substring(0,10) :
                    dateTo;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (regionCode !== undefined) {
                localVarQueryParameter['region_code'] = regionCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for Metric model.
         * @param {string} id A UUID string identifying this Metric.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieve', 'id', id)
            const localVarPath = `/metrics/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Action that returns the seasonality of a specific metric.
         * @param {string} id A UUID string identifying this Metric.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonalityRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seasonalityRetrieve', 'id', id)
            const localVarPath = `/metrics/{id}/seasonality/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Action that returns the tiles of a specified area and zoom
         * @param {string} date Date of the results to return.
         * @param {string} x 
         * @param {string} y 
         * @param {string} z 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tilesRetrieve: async (date: string, x: string, y: string, z: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('tilesRetrieve', 'date', date)
            // verify required parameter 'x' is not null or undefined
            assertParamExists('tilesRetrieve', 'x', x)
            // verify required parameter 'y' is not null or undefined
            assertParamExists('tilesRetrieve', 'y', y)
            // verify required parameter 'z' is not null or undefined
            assertParamExists('tilesRetrieve', 'z', z)
            const localVarPath = `/metrics/tiles/{z}/{x}/{y}/`
                .replace(`{${"x"}}`, encodeURIComponent(String(x)))
                .replace(`{${"y"}}`, encodeURIComponent(String(y)))
                .replace(`{${"z"}}`, encodeURIComponent(String(z)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for Metric model.
         * @param {string} date Date of the results to return.
         * @param {string} x 
         * @param {string} y 
         * @param {string} z 
         * @param {number} [days] Number of days to return in the time series.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeseriesTilesRetrieve: async (date: string, x: string, y: string, z: string, days?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('timeseriesTilesRetrieve', 'date', date)
            // verify required parameter 'x' is not null or undefined
            assertParamExists('timeseriesTilesRetrieve', 'x', x)
            // verify required parameter 'y' is not null or undefined
            assertParamExists('timeseriesTilesRetrieve', 'y', y)
            // verify required parameter 'z' is not null or undefined
            assertParamExists('timeseriesTilesRetrieve', 'z', z)
            const localVarPath = `/metrics/timeseries/tiles/{z}/{x}/{y}/`
                .replace(`{${"x"}}`, encodeURIComponent(String(x)))
                .replace(`{${"y"}}`, encodeURIComponent(String(y)))
                .replace(`{${"z"}}`, encodeURIComponent(String(z)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Action that returns the trend of a specific metric.
         * @param {string} id A UUID string identifying this Metric.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trendRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('trendRetrieve', 'id', id)
            const localVarPath = `/metrics/{id}/trend/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * Action that creates a batch of metrics, and calls a Predictor model to predict values.  The endpoint accepts a **CSV file** with the following filename format: **\"bites_YYYY-MM-DD.csv**\", and with the following columns: **[code, est]**.  The CSV should contain every region for a specific day (specified in the filename), where the \"code\" is the region code and the \"est\" is the value.
         * @param {MetricFileRequest} metricFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchCreate(metricFileRequest: MetricFileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchCreate(metricFileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.batchCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Action that returns the all the dates in which there are metrics available.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datesList(ordering?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LastMetricDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.datesList(ordering, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.datesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Action that returns the last date in which there are metrics available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lastDateRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LastMetricDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lastDateRetrieve(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.lastDateRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ViewSet for Metric model.
         * @param {string} [dateFrom] Starting date from which the results will return.
         * @param {string} [dateTo] Ending date which to the results will return.
         * @param {MetricsListOrderingParameter} [ordering] Order by &#x60;date&#x60; (asc) or &#x60;-date&#x60; (desc)
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [regionCode] Determines the region of the results (history).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(dateFrom?: string, dateTo?: string, ordering?: MetricsListOrderingParameter, page?: number, pageSize?: number, regionCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMetricList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(dateFrom, dateTo, ordering, page, pageSize, regionCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ViewSet for Metric model.
         * @param {string} id A UUID string identifying this Metric.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Action that returns the seasonality of a specific metric.
         * @param {string} id A UUID string identifying this Metric.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seasonalityRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricSeasonality>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seasonalityRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.seasonalityRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Action that returns the tiles of a specified area and zoom
         * @param {string} date Date of the results to return.
         * @param {string} x 
         * @param {string} y 
         * @param {string} z 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tilesRetrieve(date: string, x: string, y: string, z: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Metric>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tilesRetrieve(date, x, y, z, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.tilesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ViewSet for Metric model.
         * @param {string} date Date of the results to return.
         * @param {string} x 
         * @param {string} y 
         * @param {string} z 
         * @param {number} [days] Number of days to return in the time series.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timeseriesTilesRetrieve(date: string, x: string, y: string, z: string, days?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Metric>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timeseriesTilesRetrieve(date, x, y, z, days, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.timeseriesTilesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Action that returns the trend of a specific metric.
         * @param {string} id A UUID string identifying this Metric.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trendRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricTrend>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trendRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.trendRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricsApiFp(configuration)
    return {
        /**
         * Action that creates a batch of metrics, and calls a Predictor model to predict values.  The endpoint accepts a **CSV file** with the following filename format: **\"bites_YYYY-MM-DD.csv**\", and with the following columns: **[code, est]**.  The CSV should contain every region for a specific day (specified in the filename), where the \"code\" is the region code and the \"est\" is the value.
         * @param {MetricsApiBatchCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreate(requestParameters: MetricsApiBatchCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.batchCreate(requestParameters.metricFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Action that returns the all the dates in which there are metrics available.
         * @param {MetricsApiDatesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datesList(requestParameters: MetricsApiDatesListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<LastMetricDate>> {
            return localVarFp.datesList(requestParameters.ordering, options).then((request) => request(axios, basePath));
        },
        /**
         * Action that returns the last date in which there are metrics available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lastDateRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<LastMetricDate> {
            return localVarFp.lastDateRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for Metric model.
         * @param {MetricsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: MetricsApiListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedMetricList> {
            return localVarFp.list(requestParameters.dateFrom, requestParameters.dateTo, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.regionCode, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for Metric model.
         * @param {MetricsApiRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(requestParameters: MetricsApiRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<MetricDetail> {
            return localVarFp.retrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Action that returns the seasonality of a specific metric.
         * @param {MetricsApiSeasonalityRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonalityRetrieve(requestParameters: MetricsApiSeasonalityRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<MetricSeasonality> {
            return localVarFp.seasonalityRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Action that returns the tiles of a specified area and zoom
         * @param {MetricsApiTilesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tilesRetrieve(requestParameters: MetricsApiTilesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Metric> {
            return localVarFp.tilesRetrieve(requestParameters.date, requestParameters.x, requestParameters.y, requestParameters.z, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for Metric model.
         * @param {MetricsApiTimeseriesTilesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeseriesTilesRetrieve(requestParameters: MetricsApiTimeseriesTilesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Metric> {
            return localVarFp.timeseriesTilesRetrieve(requestParameters.date, requestParameters.x, requestParameters.y, requestParameters.z, requestParameters.days, options).then((request) => request(axios, basePath));
        },
        /**
         * Action that returns the trend of a specific metric.
         * @param {MetricsApiTrendRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trendRetrieve(requestParameters: MetricsApiTrendRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<MetricTrend> {
            return localVarFp.trendRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for batchCreate operation in MetricsApi.
 * @export
 * @interface MetricsApiBatchCreateRequest
 */
export interface MetricsApiBatchCreateRequest {
    /**
     * 
     * @type {MetricFileRequest}
     * @memberof MetricsApiBatchCreate
     */
    readonly metricFileRequest: MetricFileRequest
}

/**
 * Request parameters for datesList operation in MetricsApi.
 * @export
 * @interface MetricsApiDatesListRequest
 */
export interface MetricsApiDatesListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof MetricsApiDatesList
     */
    readonly ordering?: string
}

/**
 * Request parameters for list operation in MetricsApi.
 * @export
 * @interface MetricsApiListRequest
 */
export interface MetricsApiListRequest {
    /**
     * Starting date from which the results will return.
     * @type {string}
     * @memberof MetricsApiList
     */
    readonly dateFrom?: string

    /**
     * Ending date which to the results will return.
     * @type {string}
     * @memberof MetricsApiList
     */
    readonly dateTo?: string

    /**
     * Order by &#x60;date&#x60; (asc) or &#x60;-date&#x60; (desc)
     * @type {MetricsListOrderingParameter}
     * @memberof MetricsApiList
     */
    readonly ordering?: MetricsListOrderingParameter

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof MetricsApiList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof MetricsApiList
     */
    readonly pageSize?: number

    /**
     * Determines the region of the results (history).
     * @type {string}
     * @memberof MetricsApiList
     */
    readonly regionCode?: string
}

/**
 * Request parameters for retrieve operation in MetricsApi.
 * @export
 * @interface MetricsApiRetrieveRequest
 */
export interface MetricsApiRetrieveRequest {
    /**
     * A UUID string identifying this Metric.
     * @type {string}
     * @memberof MetricsApiRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for seasonalityRetrieve operation in MetricsApi.
 * @export
 * @interface MetricsApiSeasonalityRetrieveRequest
 */
export interface MetricsApiSeasonalityRetrieveRequest {
    /**
     * A UUID string identifying this Metric.
     * @type {string}
     * @memberof MetricsApiSeasonalityRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for tilesRetrieve operation in MetricsApi.
 * @export
 * @interface MetricsApiTilesRetrieveRequest
 */
export interface MetricsApiTilesRetrieveRequest {
    /**
     * Date of the results to return.
     * @type {string}
     * @memberof MetricsApiTilesRetrieve
     */
    readonly date: string

    /**
     * 
     * @type {string}
     * @memberof MetricsApiTilesRetrieve
     */
    readonly x: string

    /**
     * 
     * @type {string}
     * @memberof MetricsApiTilesRetrieve
     */
    readonly y: string

    /**
     * 
     * @type {string}
     * @memberof MetricsApiTilesRetrieve
     */
    readonly z: string
}

/**
 * Request parameters for timeseriesTilesRetrieve operation in MetricsApi.
 * @export
 * @interface MetricsApiTimeseriesTilesRetrieveRequest
 */
export interface MetricsApiTimeseriesTilesRetrieveRequest {
    /**
     * Date of the results to return.
     * @type {string}
     * @memberof MetricsApiTimeseriesTilesRetrieve
     */
    readonly date: string

    /**
     * 
     * @type {string}
     * @memberof MetricsApiTimeseriesTilesRetrieve
     */
    readonly x: string

    /**
     * 
     * @type {string}
     * @memberof MetricsApiTimeseriesTilesRetrieve
     */
    readonly y: string

    /**
     * 
     * @type {string}
     * @memberof MetricsApiTimeseriesTilesRetrieve
     */
    readonly z: string

    /**
     * Number of days to return in the time series.
     * @type {number}
     * @memberof MetricsApiTimeseriesTilesRetrieve
     */
    readonly days?: number
}

/**
 * Request parameters for trendRetrieve operation in MetricsApi.
 * @export
 * @interface MetricsApiTrendRetrieveRequest
 */
export interface MetricsApiTrendRetrieveRequest {
    /**
     * A UUID string identifying this Metric.
     * @type {string}
     * @memberof MetricsApiTrendRetrieve
     */
    readonly id: string
}

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
    /**
     * Action that creates a batch of metrics, and calls a Predictor model to predict values.  The endpoint accepts a **CSV file** with the following filename format: **\"bites_YYYY-MM-DD.csv**\", and with the following columns: **[code, est]**.  The CSV should contain every region for a specific day (specified in the filename), where the \"code\" is the region code and the \"est\" is the value.
     * @param {MetricsApiBatchCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public batchCreate(requestParameters: MetricsApiBatchCreateRequest, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).batchCreate(requestParameters.metricFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Action that returns the all the dates in which there are metrics available.
     * @param {MetricsApiDatesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public datesList(requestParameters: MetricsApiDatesListRequest = {}, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).datesList(requestParameters.ordering, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Action that returns the last date in which there are metrics available.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public lastDateRetrieve(options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).lastDateRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for Metric model.
     * @param {MetricsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public list(requestParameters: MetricsApiListRequest = {}, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).list(requestParameters.dateFrom, requestParameters.dateTo, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.regionCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for Metric model.
     * @param {MetricsApiRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public retrieve(requestParameters: MetricsApiRetrieveRequest, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).retrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Action that returns the seasonality of a specific metric.
     * @param {MetricsApiSeasonalityRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public seasonalityRetrieve(requestParameters: MetricsApiSeasonalityRetrieveRequest, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).seasonalityRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Action that returns the tiles of a specified area and zoom
     * @param {MetricsApiTilesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public tilesRetrieve(requestParameters: MetricsApiTilesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).tilesRetrieve(requestParameters.date, requestParameters.x, requestParameters.y, requestParameters.z, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for Metric model.
     * @param {MetricsApiTimeseriesTilesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public timeseriesTilesRetrieve(requestParameters: MetricsApiTimeseriesTilesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).timeseriesTilesRetrieve(requestParameters.date, requestParameters.x, requestParameters.y, requestParameters.z, requestParameters.days, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Action that returns the trend of a specific metric.
     * @param {MetricsApiTrendRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public trendRetrieve(requestParameters: MetricsApiTrendRetrieveRequest, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).trendRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

